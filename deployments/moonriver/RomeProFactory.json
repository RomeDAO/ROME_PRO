{
  "address": "0xd8c2587Eae9EdC5dd83E2F40e9A1c26af288A7c6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_romeTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_romeProFactoryStorage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_romeProSubsidyRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_romeDAO",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_customTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierCeilings",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        }
      ],
      "name": "createBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tierCeilings",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        }
      ],
      "name": "createBondAndTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "romeDAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "romeProFactoryStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "romeProSubsidyRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "romeTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferManagment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2cdcdcda38198d165cda683668c28698a618a0bb41cf59f172ef4ad606463447",
  "receipt": {
    "to": null,
    "from": "0x7c21291D033E88bd6A22bA8f3D0716bDD47C9F2e",
    "contractAddress": "0xd8c2587Eae9EdC5dd83E2F40e9A1c26af288A7c6",
    "transactionIndex": 2,
    "gasUsed": "4025403",
    "logsBloom": "0x
    "blockHash": "0x63d231dfde3d2a2851436d28c1c52902e8ec1797e4a3453373b1d2c5353591b0",
    "transactionHash": "0x2cdcdcda38198d165cda683668c28698a618a0bb41cf59f172ef4ad606463447",
    "logs": [],
    "blockNumber": 1344419,
    "cumulativeGasUsed": "4354866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a7FEbD52efda82d6f8acE24908aE0aa5b4f956",
    "0x12bADdDCBA4144b74D4b9d62F80479D29d70c569",
    "0x65101AfADE7fE6503E33a895973c954A1F64B49C",
    "0x2c05531aF9b0Aaf8B61fc676D9eC9CFCce0eE2A2"
  ],
  "numDeployments": 1,
  "solcInputHash": "10305ed83f4b27f9bbd1e3df2042a625",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_romeTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_romeProFactoryStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_romeProSubsidyRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_romeDAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"createBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"createBondAndTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"romeDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"romeProFactoryStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"romeProSubsidyRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"romeTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferManagment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBond(address,address,address,address,uint256[],uint256[])\":{\"params\":{\"_customTreasury\":\"address\",\"_initialOwner\":\"address\",\"_payoutToken\":\"address\",\"_principleToken\":\"address\"},\"returns\":{\"_bond\":\"address\",\"_treasury\":\"address\"}},\"createBondAndTreasury(address,address,address,uint256[],uint256[])\":{\"params\":{\"_initialOwner\":\"address\",\"_payoutToken\":\"address\",\"_principleToken\":\"address\"},\"returns\":{\"_bond\":\"address\",\"_treasury\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBond(address,address,address,address,uint256[],uint256[])\":{\"notice\":\"deploys custom treasury and custom bond contracts and returns address of both\"},\"createBondAndTreasury(address,address,address,uint256[],uint256[])\":{\"notice\":\"deploys custom treasury and custom bond contracts and returns address of both\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/factory.sol\":\"RomeProFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/contracts/factory.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-09-23\\n*/\\n\\n// File contracts/interfaces/IRomeProFactoryStorage.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IRomeProFactoryStorage {\\n    function pushBond(address _payoutToken, address _principleToken, address _customTreasury, address _customBond, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external returns(address _treasury, address _bond);\\n}\\n\\n\\n// File contracts/types/Ownable.sol\\n\\npragma solidity 0.7.5;\\n\\ncontract Ownable {\\n\\n    address public policy;\\n\\n    constructor () {\\n        policy = msg.sender;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require( policy == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n    \\n    function transferManagment(address _newOwner) external onlyPolicy() {\\n        require( _newOwner != address(0) );\\n        policy = _newOwner;\\n    }\\n}\\n\\n\\n// File contracts/libraries/SafeMath.sol\\n\\npragma solidity 0.7.5;\\n\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\\n\\n// File contracts/libraries/Address.sol\\n\\npragma solidity 0.7.5;\\n\\n\\nlibrary Address {\\n\\n    function isContract(address account) internal view returns (bool) {\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns(string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = '0';\\n        _addr[1] = 'x';\\n\\n        for(uint256 i = 0; i < 20; i++) {\\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n\\n    }\\n}\\n\\n\\n// File contracts/interfaces/IERC20.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File contracts/libraries/SafeERC20.sol\\n\\npragma solidity 0.7.5;\\n\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File contracts/libraries/FullMath.sol\\n\\n\\npragma solidity 0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, 'FullMath::mulDiv: overflow');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\\n\\n// File contracts/libraries/FixedPoint.sol\\n\\n\\npragma solidity 0.7.5;\\n\\nlibrary Babylonian {\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\n\\nlibrary FixedPoint {\\n\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n\\n        return uint(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n    \\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\\n\\n// File contracts/interfaces/ITreasury.sol\\n\\n\\npragma solidity 0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external;\\n    function valueOfToken( address _principleTokenAddress, uint _amount ) external view returns ( uint value_ );\\n}\\n\\n\\n// File contracts/RomeProCustomBond.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\ncontract CustomBond is Ownable {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    \\n    /* ======== EVENTS ======== */\\n\\n    event BondCreated( uint deposit, uint payout, uint expires );\\n    event BondRedeemed( address recipient, uint payout, uint remaining );\\n    event BondPriceChanged( uint internalPrice, uint debtRatio );\\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\\n    \\n    \\n     /* ======== STATE VARIABLES ======== */\\n    \\n    IERC20 immutable payoutToken; // token paid for principal\\n    IERC20 immutable principalToken; // inflow token\\n    ITreasury immutable customTreasury; // pays for and receives principal\\n    address immutable romeDAO;\\n    address romeTreasury; // receives fee\\n\\n    uint public totalPrincipalBonded;\\n    uint public totalPayoutGiven;\\n    \\n    Terms public terms; // stores terms for new bonds\\n    Adjust public adjustment; // stores adjustment to BCV data\\n    FeeTiers[] private feeTiers; // stores fee tiers\\n\\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\\n\\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\\n    uint public lastDecay; // reference block for debt decay\\n\\n    address immutable subsidyRouter; // pays subsidy in OHM to custom treasury\\n    uint payoutSinceLastSubsidy; // principal accrued since subsidy paid\\n    \\n    /* ======== STRUCTS ======== */\\n\\n    struct FeeTiers {\\n        uint tierCeilings; // principal bonded till next tier\\n        uint fees; // in ten-thousandths (i.e. 33300 = 3.33%)\\n    }\\n\\n    // Info for creating new bonds\\n    struct Terms {\\n        uint controlVariable; // scaling variable for price\\n        uint vestingTerm; // in blocks\\n        uint minimumPrice; // vs principal value\\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint maxDebt; // payout token decimal debt ratio, max % total supply created as debt\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint payout; // payout token remaining to be paid\\n        uint vesting; // Blocks left to vest\\n        uint lastBlock; // Last interaction\\n        uint truePricePaid; // Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\\n    }\\n\\n    // Info for incremental adjustments to control variable \\n    struct Adjust {\\n        bool add; // addition or subtraction\\n        uint rate; // increment\\n        uint target; // BCV when adjustment finished\\n        uint buffer; // minimum length (in blocks) between adjustments\\n        uint lastBlock; // block when last adjustment made\\n    }\\n    \\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _customTreasury, \\n        address _payoutToken, \\n        address _principalToken, \\n        address _romeTreasury,\\n        address _subsidyRouter, \\n        address _initialOwner, \\n        address _romeDAO,\\n        uint[] memory _tierCeilings, \\n        uint[] memory _fees\\n    ) {\\n        require( _customTreasury != address(0) );\\n        customTreasury = ITreasury( _customTreasury );\\n        require( _payoutToken != address(0) );\\n        payoutToken = IERC20( _payoutToken );\\n        require( _principalToken != address(0) );\\n        principalToken = IERC20( _principalToken );\\n        require( _romeTreasury != address(0) );\\n        romeTreasury = _romeTreasury;\\n        require( _subsidyRouter != address(0) );\\n        subsidyRouter = _subsidyRouter;\\n        require( _initialOwner != address(0) );\\n        policy = _initialOwner;\\n        require( _romeDAO != address(0) );\\n        romeDAO = _romeDAO;\\n        require(_tierCeilings.length == _fees.length, \\\"tier length and fee length not the same\\\");\\n\\n        for(uint i; i < _tierCeilings.length; i++) {\\n            feeTiers.push( FeeTiers({\\n                tierCeilings: _tierCeilings[i],\\n                fees: _fees[i]\\n            }));\\n        }\\n    }\\n\\n    /* ======== INITIALIZATION ======== */\\n    \\n    /**\\n     *  @notice initializes bond parameters\\n     *  @param _controlVariable uint\\n     *  @param _vestingTerm uint\\n     *  @param _minimumPrice uint\\n     *  @param _maxPayout uint\\n     *  @param _maxDebt uint\\n     *  @param _initialDebt uint\\n     */\\n    function initializeBond( \\n        uint _controlVariable, \\n        uint _vestingTerm,\\n        uint _minimumPrice,\\n        uint _maxPayout,\\n        uint _maxDebt,\\n        uint _initialDebt\\n    ) external onlyPolicy() {\\n        require( currentDebt() == 0, \\\"Debt must be 0 for initialization\\\" );\\n        terms = Terms ({\\n            controlVariable: _controlVariable,\\n            vestingTerm: _vestingTerm,\\n            minimumPrice: _minimumPrice,\\n            maxPayout: _maxPayout,\\n            maxDebt: _maxDebt\\n        });\\n        totalDebt = _initialDebt;\\n        lastDecay = block.number;\\n    }\\n    \\n    \\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    enum PARAMETER { VESTING, PAYOUT, DEBT }\\n    /**\\n     *  @notice set parameters for new bonds\\n     *  @param _parameter PARAMETER\\n     *  @param _input uint\\n     */\\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\\n        if ( _parameter == PARAMETER.VESTING ) { // 0\\n            require( _input >= 10000, \\\"Vesting must be longer than 36 hours\\\" );\\n            terms.vestingTerm = _input;\\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\\n            require( _input <= 1000, \\\"Payout cannot be above 1 percent\\\" );\\n            terms.maxPayout = _input;\\n        } else if ( _parameter == PARAMETER.DEBT ) { // 2\\n            terms.maxDebt = _input;\\n        }\\n    }\\n\\n    /**\\n     *  @notice set control variable adjustment\\n     *  @param _addition bool\\n     *  @param _increment uint\\n     *  @param _target uint\\n     *  @param _buffer uint\\n     */\\n    function setAdjustment ( \\n        bool _addition,\\n        uint _increment, \\n        uint _target,\\n        uint _buffer \\n    ) external onlyPolicy() {\\n        require( _increment <= terms.controlVariable.mul( 30 ).div( 1000 ), \\\"Increment too large\\\" );\\n\\n        adjustment = Adjust({\\n            add: _addition,\\n            rate: _increment,\\n            target: _target,\\n            buffer: _buffer,\\n            lastBlock: block.number\\n        });\\n    }\\n\\n    /**\\n     *  @notice change address of Rome Treasury\\n     *  @param _romeTreasury uint\\n     */\\n    function changeRomeTreasury(address _romeTreasury) external {\\n        require( msg.sender == romeDAO, \\\"Only Rome DAO\\\" );\\n        romeTreasury = _romeTreasury;\\n    }\\n\\n    /**\\n     *  @notice subsidy controller checks payouts since last subsidy and resets counter\\n     *  @return payoutSinceLastSubsidy_ uint\\n     */\\n    function paySubsidy() external returns ( uint payoutSinceLastSubsidy_ ) {\\n        require( msg.sender == subsidyRouter, \\\"Only subsidy controller\\\" );\\n\\n        payoutSinceLastSubsidy_ = payoutSinceLastSubsidy;\\n        payoutSinceLastSubsidy = 0;\\n    }\\n    \\n    /* ======== USER FUNCTIONS ======== */\\n    \\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(uint _amount, uint _maxPrice, address _depositor) external returns (uint) {\\n        require( _depositor != address(0), \\\"Invalid address\\\" );\\n\\n        decayDebt();\\n        require( totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\" );\\n        \\n        uint nativePrice = trueBondPrice();\\n\\n        require( _maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\" ); // slippage protection\\n\\n        uint value = customTreasury.valueOfToken( address(principalToken), _amount );\\n        uint payout = _payoutFor( value ); // payout to bonder is computed\\n\\n        require( payout >= 10 ** payoutToken.decimals() / 100, \\\"Bond too small\\\" ); // must be > 0.01 payout token ( underflow protection )\\n        require( payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n        // profits are calculated\\n        uint fee = payout.mul( currentRomeFee() ).div( 1e6 );\\n\\n        /**\\n            principal is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) payout token\\n         */\\n        principalToken.safeTransferFrom( msg.sender, address(this), _amount );\\n        principalToken.approve( address(customTreasury), _amount );\\n        customTreasury.deposit( address(principalToken), _amount, payout );\\n        \\n        if ( fee != 0 ) { // fee is transferred to dao \\n            payoutToken.transfer(romeTreasury, fee);\\n        }\\n        \\n        // total debt is increased\\n        totalDebt = totalDebt.add( value );\\n                \\n        // depositor info is stored\\n        bondInfo[ _depositor ] = Bond({ \\n            payout: bondInfo[ _depositor ].payout.add( payout.sub(fee) ),\\n            vesting: terms.vestingTerm,\\n            lastBlock: block.number,\\n            truePricePaid: trueBondPrice()\\n        });\\n\\n        // indexed events are emitted\\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ) );\\n        emit BondPriceChanged( _bondPrice(), debtRatio() );\\n\\n        totalPrincipalBonded = totalPrincipalBonded.add(_amount); // total bonded increased\\n        totalPayoutGiven = totalPayoutGiven.add(payout); // total payout increased\\n        payoutSinceLastSubsidy = payoutSinceLastSubsidy.add( payout ); // subsidy counter increased\\n\\n        adjust(); // control variable is adjusted\\n        return payout; \\n    }\\n    \\n    /** \\n     *  @notice redeem bond for user\\n     *  @return uint\\n     */ \\n    function redeem(address _depositor) external returns (uint) {\\n        Bond memory info = bondInfo[ _depositor ];\\n        uint percentVested = percentVestedFor( _depositor ); // (blocks since last interaction / vesting term remaining)\\n\\n        if ( percentVested >= 10000 ) { // if fully vested\\n            delete bondInfo[ _depositor ]; // delete user info\\n            emit BondRedeemed( _depositor, info.payout, 0 ); // emit bond data\\n            payoutToken.transfer( _depositor, info.payout );\\n            return info.payout;\\n\\n        } else { // if unfinished\\n            // calculate payout vested\\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\\n\\n            // store updated deposit info\\n            bondInfo[ _depositor ] = Bond({\\n                payout: info.payout.sub( payout ),\\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\\n                lastBlock: block.number,\\n                truePricePaid: info.truePricePaid\\n            });\\n\\n            emit BondRedeemed( _depositor, payout, bondInfo[ _depositor ].payout );\\n            payoutToken.transfer( _depositor, payout );\\n            return payout;\\n        }\\n        \\n    }\\n    \\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice makes incremental adjustment to control variable\\n     */\\n    function adjust() internal {\\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\\n            uint initial = terms.controlVariable;\\n            if ( adjustment.add ) {\\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\\n                if ( terms.controlVariable >= adjustment.target ) {\\n                    adjustment.rate = 0;\\n                }\\n            } else {\\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\\n                if ( terms.controlVariable <= adjustment.target ) {\\n                    adjustment.rate = 0;\\n                }\\n            }\\n            adjustment.lastBlock = block.number;\\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt() internal {\\n        totalDebt = totalDebt.sub( debtDecay() );\\n        lastDecay = block.number;\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice() internal returns ( uint price_ ) {\\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\\n        if ( price_ < terms.minimumPrice ) {\\n            price_ = terms.minimumPrice;        \\n        } else if ( terms.minimumPrice != 0 ) {\\n            terms.minimumPrice = 0;\\n        }\\n    }\\n\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice() public view returns ( uint price_ ) {        \\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\\n        if ( price_ < terms.minimumPrice ) {\\n            price_ = terms.minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate true bond price a user pays\\n     *  @return price_ uint\\n     */\\n    function trueBondPrice() public view returns ( uint price_ ) {\\n        price_ = bondPrice().add(bondPrice().mul( currentRomeFee() ).div( 1e6 ) );\\n    }\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout() public view returns ( uint ) {\\n        return payoutToken.totalSupply().mul( terms.maxPayout ).div( 100000 );\\n    }\\n\\n    /**\\n     *  @notice calculate total interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function _payoutFor( uint _value ) internal view returns ( uint ) {\\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\\n    }\\n\\n    /**\\n     *  @notice calculate user's interest due for new bond, accounting for Rome Fee\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor( uint _value ) external view returns ( uint ) {\\n        uint total = FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\\n        return total.sub(total.mul( currentRomeFee() ).div( 1e6 ));\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to payout token supply\\n     *  @notice protocols using Rome Pro should be careful when quickly adding large %s to total supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \\n        debtRatio_ = FixedPoint.fraction( \\n            currentDebt().mul( 10 ** payoutToken.decimals() ), \\n            payoutToken.totalSupply()\\n        ).decode112with18().div( 1e18 );\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt() public view returns ( uint ) {\\n        return totalDebt.sub( debtDecay() );\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay() public view returns ( uint decay_ ) {\\n        uint blocksSinceLast = block.number.sub( lastDecay );\\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\\n        if ( decay_ > totalDebt ) {\\n            decay_ = totalDebt;\\n        }\\n    }\\n\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\\n        Bond memory bond = bondInfo[ _depositor ];\\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\\n        uint vesting = bond.vesting;\\n\\n        if ( vesting > 0 ) {\\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of payout token available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\\n        uint percentVested = percentVestedFor( _depositor );\\n        uint payout = bondInfo[ _depositor ].payout;\\n\\n        if ( percentVested >= 10000 ) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\\n        }\\n    }\\n\\n    /**\\n     *  @notice current fee Rome takes of each bond\\n     *  @return currentFee_ uint\\n     */\\n    function currentRomeFee() public view returns( uint currentFee_ ) {\\n        uint tierLength = feeTiers.length;\\n        for(uint i; i < tierLength; i++) {\\n            if(totalPrincipalBonded < feeTiers[i].tierCeilings || i == tierLength - 1 ) {\\n                return feeTiers[i].fees;\\n            }\\n        }\\n    }\\n    \\n}\\n\\n\\n// File contracts/RomeProCustomTreasury.sol\\n\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract CustomTreasury is Ownable {\\n    \\n    /* ======== DEPENDENCIES ======== */\\n    \\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    \\n    \\n    /* ======== STATE VARIABLS ======== */\\n    \\n    address public immutable payoutToken;\\n\\n    mapping(address => bool) public bondContract; \\n    \\n    /* ======== EVENTS ======== */\\n\\n    event BondContractToggled(address bondContract, bool approved);\\n    event Withdraw(address token, address destination, uint amount);\\n    \\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(address _payoutToken, address _initialOwner) {\\n        require( _payoutToken != address(0) );\\n        payoutToken = _payoutToken;\\n        require( _initialOwner != address(0) );\\n        policy = _initialOwner;\\n    }\\n\\n    /* ======== BOND CONTRACT FUNCTION ======== */\\n\\n    /**\\n     *  @notice deposit principle token and recieve back payout token\\n     *  @param _principleTokenAddress address\\n     *  @param _amountPrincipleToken uint\\n     *  @param _amountPayoutToken uint\\n     */\\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external {\\n        require(bondContract[msg.sender], \\\"msg.sender is not a bond contract\\\");\\n        IERC20(_principleTokenAddress).safeTransferFrom(msg.sender, address(this), _amountPrincipleToken);\\n        IERC20(payoutToken).safeTransfer(msg.sender, _amountPayoutToken);\\n    }\\n\\n    /* ======== VIEW FUNCTION ======== */\\n    \\n    /**\\n    *   @notice returns payout token valuation of priciple\\n    *   @param _principleTokenAddress address\\n    *   @param _amount uint\\n    *   @return value_ uint\\n     */\\n    function valueOfToken( address _principleTokenAddress, uint _amount ) public view returns ( uint value_ ) {\\n        // convert amount to match payout token decimals\\n        value_ = _amount.mul( 10 ** IERC20( payoutToken ).decimals() ).div( 10 ** IERC20( _principleTokenAddress ).decimals() );\\n    }\\n\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice policy can withdraw ERC20 token to desired address\\n     *  @param _token uint\\n     *  @param _destination address\\n     *  @param _amount uint\\n     */\\n    function withdraw(address _token, address _destination, uint _amount) external onlyPolicy() {\\n        IERC20(_token).safeTransfer(_destination, _amount);\\n\\n        emit Withdraw(_token, _destination, _amount);\\n    }\\n\\n    /**\\n        @notice toggle bond contract\\n        @param _bondContract address\\n     */\\n    function toggleBondContract(address _bondContract) external onlyPolicy() {\\n        bondContract[_bondContract] = !bondContract[_bondContract];\\n        emit BondContractToggled(_bondContract, bondContract[_bondContract]);\\n    }\\n    \\n}\\n\\n\\n// File contracts/RomeProFactory.sol\\n\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\n\\ncontract RomeProFactory is Ownable {\\n    \\n    /* ======== STATE VARIABLS ======== */\\n    \\n    address immutable public romeTreasury;\\n    address immutable public romeProFactoryStorage;\\n    address immutable public romeProSubsidyRouter;\\n    address immutable public romeDAO;\\n    \\n    /* ======== CONSTRUCTION ======== */\\n    \\n    constructor(address _romeTreasury, address _romeProFactoryStorage, address _romeProSubsidyRouter, address _romeDAO) {\\n        require( _romeTreasury != address(0) );\\n        romeTreasury = _romeTreasury;\\n        require( _romeProFactoryStorage != address(0) );\\n        romeProFactoryStorage = _romeProFactoryStorage;\\n        require( _romeProSubsidyRouter != address(0) );\\n        romeProSubsidyRouter = _romeProSubsidyRouter;\\n        require( _romeDAO != address(0) );\\n        romeDAO = _romeDAO;\\n    }\\n    \\n    /* ======== POLICY FUNCTIONS ======== */\\n    \\n    /**\\n        @notice deploys custom treasury and custom bond contracts and returns address of both\\n        @param _payoutToken address\\n        @param _principleToken address\\n        @param _initialOwner address\\n        @return _treasury address\\n        @return _bond address\\n     */\\n    function createBondAndTreasury(address _payoutToken, address _principleToken, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external onlyPolicy() returns(address _treasury, address _bond) {\\n    \\n        CustomTreasury treasury = new CustomTreasury(_payoutToken, _initialOwner);\\n        CustomBond bond = new CustomBond(address(treasury), _payoutToken, _principleToken, romeTreasury, romeProSubsidyRouter, _initialOwner, romeDAO, _tierCeilings, _fees);\\n        \\n        return IRomeProFactoryStorage(romeProFactoryStorage).pushBond(\\n            _payoutToken, _principleToken, address(treasury), address(bond), _initialOwner, _tierCeilings, _fees\\n        );\\n    }\\n\\n    /**\\n        @notice deploys custom treasury and custom bond contracts and returns address of both\\n        @param _payoutToken address\\n        @param _principleToken address\\n        @param _customTreasury address\\n        @param _initialOwner address\\n        @return _treasury address\\n        @return _bond address\\n     */\\n    function createBond(address _payoutToken, address _principleToken, address _customTreasury, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees ) external onlyPolicy() returns(address _treasury, address _bond) {\\n\\n        CustomBond bond = new CustomBond(_customTreasury, _payoutToken, _principleToken, _customTreasury, romeProSubsidyRouter, _initialOwner, romeDAO, _tierCeilings, _fees);\\n\\n        return IRomeProFactoryStorage(romeProFactoryStorage).pushBond(\\n            _payoutToken, _principleToken, _customTreasury, address(bond), _initialOwner, _tierCeilings, _fees\\n        );\\n    }\\n    \\n}\",\"keccak256\":\"0x6247e45fbc0e69d78b3b0aee971bed31a6b4271ac0f0af34edf7c3e1b4a199ca\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806386eb03031161005b57806386eb030314610103578063abefbca31461010b578063ed61e29314610113578063f185a8891461025357610088565b80630505c8c91461008d5780633bfdd7de146100be578063500ac88e146100f357806354720c86146100fb575b600080fd5b610095610343565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100f1600480360360208110156100d457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661035f565b005b61009561044c565b610095610470565b610095610494565b6100956104b8565b61020a600480360360c081101561012957600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101358216926040820135831692606083013516919081019060a08101608082013564010000000081111561017957600080fd5b82018360208201111561018b57600080fd5b803590602001918460208302840111640100000000831117156101ad57600080fd5b9193909290916020810190356401000000008111156101cb57600080fd5b8201836020820111156101dd57600080fd5b803590602001918460208302840111640100000000831117156101ff57600080fd5b5090925090506104dc565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b61020a600480360360a081101561026957600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101358216926040820135909216918101906080810160608201356401000000008111156102b257600080fd5b8201836020820111156102c457600080fd5b803590602001918460208302840111640100000000831117156102e657600080fd5b91939092909160208101903564010000000081111561030457600080fd5b82018360208201111561031657600080fd5b8035906020019184602083028401116401000000008311171561033857600080fd5b5090925090506108f6565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661040557600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054819073ffffffffffffffffffffffffffffffffffffffff16331461056557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000888b8b8b7f00000000000000000000000000000000000000000000000000000000000000008c7f00000000000000000000000000000000000000000000000000000000000000008d8d8d8d6040516105be90610d3e565b808c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509d5050505050505050505050505050604051809103906000f080158015610729573d6000803e3d6000fd5b5090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630e8dbe248c8c8c858d8d8d8d8d6040518a63ffffffff1660e01b8152600401808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509b5050505050505050505050506040805180830381600087803b1580156108b157600080fd5b505af11580156108c5573d6000803e3d6000fd5b505050506040513d60408110156108db57600080fd5b508051602090910151909c909b509950505050505050505050565b60008054819073ffffffffffffffffffffffffffffffffffffffff16331461097f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000898860405161098f90610d4c565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f0801580156109cf573d6000803e3d6000fd5b5090506000818b8b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008d7f00000000000000000000000000000000000000000000000000000000000000008e8e8e8e604051610a4b90610d3e565b808c73ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509d5050505050505050505050505050604051809103906000f080158015610bb6573d6000803e3d6000fd5b5090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630e8dbe248c8c85858e8e8e8e8e6040518a63ffffffff1660e01b8152600401808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509b5050505050505050505050506040805180830381600087803b1580156108b157600080fd5b612b948062000d5b83390190565b610e9680620038ef8339019056fe6101206040523480156200001257600080fd5b5060405162002b9438038062002b9483398181016040526101208110156200003957600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a0180519651989a9799959894979396929591949391820192846401000000008211156200008957600080fd5b9083019060208201858111156200009f57600080fd5b8251866020820283011164010000000082111715620000bd57600080fd5b82525081516020918201928201910280838360005b83811015620000ec578181015183820152602001620000d2565b50505050905001604052602001805160405193929190846401000000008211156200011657600080fd5b9083019060208201858111156200012c57600080fd5b82518660208202830111640100000000821117156200014a57600080fd5b82525081516020918201928201910280838360005b83811015620001795781810151838201526020016200015f565b50505050919091016040525050600080546001600160a01b0319163317905550506001600160a01b038916620001ae57600080fd5b6001600160601b031960608a901b1660c0526001600160a01b038816620001d457600080fd5b6001600160601b0319606089901b166080526001600160a01b038716620001fa57600080fd5b6001600160601b0319606088901b1660a0526001600160a01b0386166200022057600080fd5b600180546001600160a01b0319166001600160a01b038881169190911790915585166200024c57600080fd5b6001600160601b0319606086901b16610100526001600160a01b0384166200027357600080fd5b600080546001600160a01b0319166001600160a01b038681169190911790915583166200029f57600080fd5b6001600160601b0319606084901b1660e0528051825114620002f35760405162461bcd60e51b815260040180806020018281038252602781526020018062002b6d6027913960400191505060405180910390fd5b60005b82518110156200036e57600e60405180604001604052808584815181106200031a57fe5b602002602001015181526020018484815181106200033457fe5b60209081029190910181015190915282546001818101855560009485529382902083516002909202019081559101519082015501620002f6565b5050505050505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c612765620004086000398061180f52508061087b525080610cc25280610f9252806110a7525080610cfe5280610f2c5280610f56528061106f525080610dae5280611163528061146b528061163752806118ce528061196e5280611a215280611af95280611fe352506127656000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637cbe044c116100ee578063cea55f5711610097578063e0176de811610071578063e0176de8146104e6578063e392a262146104ee578063f5c2ab5b146104f6578063fc7b9c18146104fe576101ae565b8063cea55f57146104a3578063d5025625146104ab578063d7ccfb0b146104de576101ae565b8063a50603b2116100c8578063a50603b214610407578063a9bc6b7114610442578063cd1234b31461044a576101ae565b80637cbe044c1461038d5780638dbdbe6d1461039557806395a2251f146103d4576101ae565b80632d8a37511161015b578063507930ec11610135578063507930ec1461032d5780635c39f7cf14610360578063759076e5146103685780637927ebf814610370576101ae565b80632d8a3751146102925780633bfdd7de146102c5578063451ee4a1146102f8576101ae565b80631a3d00681161018c5780631a3d0068146102315780631e321a0f146102645780632bab6bde1461028a576101ae565b806301b88ee8146101b35780630505c8c9146101f85780630a74848914610229575b600080fd5b6101e6600480360360208110156101c957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610506565b60408051918252519081900360200190f35b61020061056c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101e6610588565b6102626004803603608081101561024757600080fd5b508035151590602081013590604081013590606001356105c0565b005b6102626004803603604081101561027a57600080fd5b5060ff81351690602001356106ff565b6101e661085d565b610262600480360360208110156102a857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610863565b610262600480360360208110156102db57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610934565b610300610a07565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101e66004803603602081101561034357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1f565b6101e6610abe565b6101e6610b39565b6101e66004803603602081101561038657600080fd5b5035610b4f565b6101e6610ba2565b6101e6600480360360608110156103ab57600080fd5b508035906020810135906040013573ffffffffffffffffffffffffffffffffffffffff16610ba8565b6101e6600480360360208110156103ea57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611375565b610262600480360360c081101561041d57600080fd5b5080359060208101359060408101359060608101359060808101359060a001356116fd565b6101e66117f5565b61047d6004803603602081101561046057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661188e565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101e66118b5565b6104b3611a03565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101e6611a15565b6101e6611ae5565b6101e6611b8f565b6101e6611bd4565b6101e6611bda565b60008061051283610a1f565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902054909150612710821061054c57809250610565565b61056261271061055c8385611be0565b90611c42565b92505b5050919050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60006105bb6105ad620f424061055c61059f610abe565b6105a7611a15565b90611be0565b6105b5611a15565b90611c84565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461062c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600454610642906103e89061055c90601e611be0565b831115610696576040805162461bcd60e51b815260206004820152601360248201527f496e6372656d656e7420746f6f206c6172676500000000000000000000000000604482015290519081900360640190fd5b6040805160a0810182529415158086526020860185905290850183905260608501829052436080909501859052600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055600a92909255600b55600c55600d55565b60005473ffffffffffffffffffffffffffffffffffffffff16331461076b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600082600281111561077957fe5b14156107ca576127108110156107c05760405162461bcd60e51b81526004018080602001828103825260248152602001806126e26024913960400191505060405180910390fd5b6005819055610859565b60018260028111156107d857fe5b141561083f576103e8811115610835576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b6007819055610859565b600282600281111561084d57fe5b14156108595760088190555b5050565b60035481565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ed576040805162461bcd60e51b815260206004820152600d60248201527f4f6e6c7920526f6d652044414f00000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109a0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166109c057600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600954600a54600b54600c54600d5460ff9094169385565b6000610a2961261c565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600f602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909190610a8c904390611cde565b60208301519091508015610ab157610aaa8161055c84612710611be0565b9350610ab6565b600093505b505050919050565b600e54600090815b81811015610b3357600e8181548110610adb57fe5b9060005260206000209060020201600001546002541080610afe57506001820381145b15610b2b57600e8181548110610b1057fe5b90600052602060002090600202016001015492505050610b36565b600101610ac6565b50505b90565b60006105bb610b46611b8f565b60105490611cde565b600080610b7464174876e80061055c610b6f86610b6a611a15565b611d20565b611ee1565b9050610b99610b92620f424061055c610b8b610abe565b8590611be0565b8290611cde565b9150505b919050565b60025481565b600073ffffffffffffffffffffffffffffffffffffffff8216610c12576040805162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b610c1a611f0e565b6008546010541115610c73576040805162461bcd60e51b815260206004820152601460248201527f4d61782063617061636974792072656163686564000000000000000000000000604482015290519081900360640190fd5b6000610c7d610588565b905080841015610cbe5760405162461bcd60e51b81526004018080602001828103825260238152602001806126bf6023913960400191505060405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d1b317e57f0000000000000000000000000000000000000000000000000000000000000000886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d6020811015610d9957600080fd5b505190506000610da882611f22565b905060647f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d6020811015610e3c57600080fd5b505160ff16600a0a81610e4b57fe5b04811015610ea0576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604482015290519081900360640190fd5b610ea8611ae5565b811115610efc576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604482015290519081900360640190fd5b6000610f10620f424061055c610b8b610abe565b9050610f5473ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308b611f3c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561100557600080fd5b505af1158015611019573d6000803e3d6000fd5b505050506040513d602081101561102f57600080fd5b5050604080517f0efe6a8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018b90526044820185905291517f000000000000000000000000000000000000000000000000000000000000000090921691630efe6a8b9160648082019260009290919082900301818387803b1580156110f157600080fd5b505af1158015611105573d6000803e3d6000fd5b50505050806000146111db57600154604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b1580156111ae57600080fd5b505af11580156111c2573d6000803e3d6000fd5b505050506040513d60208110156111d857600080fd5b50505b6010546111e89084611c84565b6010556040805160808101909152806112306112048585611cde565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600f602052604090205490611c84565b8152600554602082015243604082015260600161124b610588565b905273ffffffffffffffffffffffffffffffffffffffff87166000908152600f6020908152604091829020835181559083015160018201559082015160028201556060909101516003909101556005547fb7ce5a2d90f1705ca02547b0eb827724683e0df3b809477ae4326d0eefed0bc090899084906112cc904390611c84565b60408051938452602084019290925282820152519081900360600190a17f2cb17bd1fd2a1fecfefae2de1e6a59194abaa62179652924ccdca01617f0bf16611312611fd7565b61131a6118b5565b6040805192835260208301919091528051918290030190a160025461133f9089611c84565b60025560035461134f9083611c84565b60035560125461135f9083611c84565b60125561136a61206d565b509695505050505050565b600061137f61261c565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600f60209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152906113df84610a1f565b905061271081106115355773ffffffffffffffffffffffffffffffffffffffff84166000818152600f602090815260408083208381556001810184905560028101849055600301839055855181519485529184019190915282810191909152517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b19181900360600190a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8584600001516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156114fe57600080fd5b505af1158015611512573d6000803e3d6000fd5b505050506040513d602081101561152857600080fd5b505090519150610b9d9050565b815160009061154c906127109061055c9085611be0565b90506040518060800160405280611570838660000151611cde90919063ffffffff16565b815260200161159a61158f866040015143611cde90919063ffffffff16565b602087015190611cde565b81524360208083019190915260608087015160409384015273ffffffffffffffffffffffffffffffffffffffff89166000818152600f845284902085518082558685015160018301558686015160028301559583015160039091015583519081529182018590528183019390935290517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156116c657600080fd5b505af11580156116da573d6000803e3d6000fd5b505050506040513d60208110156116f057600080fd5b50909350610b9d92505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611769576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b611771610b39565b156117ad5760405162461bcd60e51b815260040180806020018281038252602181526020018061267d6021913960400191505060405180910390fd5b6040805160a081018252878152602081018790529081018590526060810184905260800182905260049590955560059390935560069190915560075560085560105543601155565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611881576040805162461bcd60e51b815260206004820152601760248201527f4f6e6c79207375627369647920636f6e74726f6c6c6572000000000000000000604482015290519081900360640190fd5b5060128054600090915590565b600f6020526000908152604090208054600182015460028301546003909301549192909184565b60006105bb670de0b6b3a764000061055c610b6f61196c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d602081101561195c57600080fd5b505160ff16600a0a6105a7610b39565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d257600080fd5b505afa1580156119e6573d6000803e3d6000fd5b505050506040513d60208110156119fc57600080fd5b5051611d20565b60045460055460065460075460085485565b6000611ad1611aba60057f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8557600080fd5b505afa158015611a99573d6000803e3d6000fd5b505050506040513d6020811015611aaf57600080fd5b505160ff1690611cde565b600a0a61055c611ac86118b5565b60045490611be0565b600654909150811015610b36575060065490565b60006105bb620186a061055c6004600301547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5d57600080fd5b505afa158015611b71573d6000803e3d6000fd5b505050506040513d6020811015611b8757600080fd5b505190611be0565b600080611ba760115443611cde90919063ffffffff16565b600554601054919250611bbe9161055c9084611be0565b9150601054821115611bd05760105491505b5090565b60115481565b60105481565b600082611bef57506000611c3c565b82820282848281611bfc57fe5b0414611c395760405162461bcd60e51b815260040180806020018281038252602181526020018061269e6021913960400191505060405180910390fd5b90505b92915050565b6000611c3983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061214d565b600082820183811015611c39576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000611c3983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506121ef565b611d28612644565b60008211611d675760405162461bcd60e51b81526004018080602001828103825260268152602001806126576026913960400191505060405180910390fd5b82611d815750604080516020810190915260008152611c3c565b71ffffffffffffffffffffffffffffffffffff8311611e5257600082607085901b81611da957fe5b0490507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115611e1d576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050611c3c565b6000611e6e846e01000000000000000000000000000085612249565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115611e1d576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091160490565b611f19610b46611b8f565b60105543601155565b6000611c3c64174876e80061055c610b6f85610b6a611a15565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611fd19085906122e9565b50505050565b6000612047611aba60057f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8557600080fd5b60065490915081101561205d5750600654610b36565b60065415610b3657600060065590565b600c54600d546000916120809190611c84565b600a54909150158015906120945750804310155b1561214a5760045460095460ff16156120ce57600a546004546120b691611c84565b6004819055600b54116120c9576000600a555b6120f0565b600a546004546120dd91611cde565b6004819055600b54106120f0576000600a555b43600d55600454600a546009546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a9181900360800190a1505b50565b600081836121d95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561219e578181015183820152602001612186565b50505050905090810190601f1680156121cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816121e557fe5b0495945050505050565b600081848411156122415760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561219e578181015183820152602001612186565b505050900390565b600080600061225886866123ac565b915091506000848061226657fe5b86880990508281111561227a576001820391505b80830392508482106122d3576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b6122de8383876123f7565b979650505050505050565b606061234b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124679092919063ffffffff16565b8051909150156123a75780806020019051602081101561236a57600080fd5b50516123a75760405162461bcd60e51b815260040180806020018281038252602a815260200180612706602a913960400191505060405180910390fd5b505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848609905083850292508281039150828110156123ef576001820391505b509250929050565b6000818103821680838161240757fe5b04925080858161241357fe5b04945080816000038161242257fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6060612476848460008561247e565b949350505050565b606061248985612616565b6124da576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061254457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612507565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146125a6576040519150601f19603f3d011682016040523d82523d6000602084013e6125ab565b606091505b509150915081156125bf5791506124769050565b8051156125cf5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561219e578181015183820152602001612186565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f44656274206d757374206265203020666f7220696e697469616c697a6174696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f7572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122002e708ce620016d442ff0350ff52b51c6130e2041811804be53a13973ca4112164736f6c6343000705003374696572206c656e67746820616e6420666565206c656e677468206e6f74207468652073616d6560a060405234801561001057600080fd5b50604051610e96380380610e968339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b031916331790556001600160a01b03821661006157600080fd5b6001600160601b0319606083901b166080526001600160a01b03811661008657600080fd5b600080546001600160a01b039092166001600160a01b03199092169190911790555060805160601c610dc76100cf60003980610302528061043252806105185250610dc76000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634efa82b61161005b5780634efa82b614610179578063d1b317e514610181578063d9caed12146101cc578063f95c23061461020f57610088565b80630505c8c91461008d5780630efe6a8b146100be57806324705db3146100ff5780633bfdd7de14610146575b600080fd5b610095610242565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100fd600480360360608110156100d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135906040013561025e565b005b6101326004803603602081101561011557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661032e565b604080519115158252519081900360200190f35b6100fd6004803603602081101561015c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610343565b610095610430565b6101ba6004803603604081101561019757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610454565b60408051918252519081900360200190f35b6100fd600480360360608110156101e257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356105a5565b6100fd6004803603602081101561022557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106a8565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b3360009081526001602052604090205460ff166102c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610d476021913960400191505060405180910390fd5b6102e873ffffffffffffffffffffffffffffffffffffffff84163330856107c2565b61032973ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016338361085d565b505050565b60016020526000908152604090205460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166103e957600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061059e8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d60208110156104c957600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216600a0a916105989173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163313ce56791600480820192602092909190829003018186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d602081101561058957600080fd5b5051859060ff16600a0a6108ea565b90610966565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461062b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61064c73ffffffffffffffffffffffffffffffffffffffff8416838361085d565b6040805173ffffffffffffffffffffffffffffffffffffffff80861682528416602082015280820183905290517f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9181900360600190a1505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461072e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff91821615179182905583519485521615159083015280517f661abc66f13f27ca765c6a753171d10aa4861f03f1b506c5b1297a2dc80cf8ee9281900390910190a150565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526108579085906109a8565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526103299084906109a8565b6000826108f957506000610960565b8282028284828161090657fe5b041461095d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610d266021913960400191505060405180910390fd5b90505b92915050565b600061059e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a80565b6060610a0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b3c9092919063ffffffff16565b80519091501561032957808060200190516020811015610a2957600080fd5b5051610329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180610d68602a913960400191505060405180910390fd5b60008183610b26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610aeb578181015183820152602001610ad3565b50505050905090810190601f168015610b185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610b3257fe5b0495945050505050565b6060610b4b8484600085610b53565b949350505050565b6060610b5e85610d1f565b610bc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310610c3357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610bf6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610c95576040519150601f19603f3d011682016040523d82523d6000602084013e610c9a565b606091505b50915091508115610cae579150610b4b9050565b805115610cbe5780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152865160248401528651879391928392604401919085019080838360008315610aeb578181015183820152602001610ad3565b3b15159056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f74206120626f6e6420636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e256b621af41d1b530c7cfa5f6ca9de6bda452bcad1282d2770557915984874a64736f6c63430007050033a2646970667358221220660ec39fbc5c10de8cb6ccc74ced52b56cf47c105a0607b18b2d3b4ca578bfb464736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBond(address,address,address,address,uint256[],uint256[])": {
        "params": {
          "_customTreasury": "address",
          "_initialOwner": "address",
          "_payoutToken": "address",
          "_principleToken": "address"
        },
        "returns": {
          "_bond": "address",
          "_treasury": "address"
        }
      },
      "createBondAndTreasury(address,address,address,uint256[],uint256[])": {
        "params": {
          "_initialOwner": "address",
          "_payoutToken": "address",
          "_principleToken": "address"
        },
        "returns": {
          "_bond": "address",
          "_treasury": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBond(address,address,address,address,uint256[],uint256[])": {
        "notice": "deploys custom treasury and custom bond contracts and returns address of both"
      },
      "createBondAndTreasury(address,address,address,uint256[],uint256[])": {
        "notice": "deploys custom treasury and custom bond contracts and returns address of both"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28,
        "contract": "src/contracts/factory.sol:RomeProFactory",
        "label": "policy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}