{
  "language": "Solidity",
  "sources": {
    "src/contracts/factory.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-09-23\n*/\n\n// File contracts/interfaces/IRomeProFactoryStorage.sol\n\npragma solidity 0.7.5;\n\ninterface IRomeProFactoryStorage {\n    function pushBond(address _payoutToken, address _principleToken, address _customTreasury, address _customBond, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external returns(address _treasury, address _bond);\n}\n\n\n// File contracts/types/Ownable.sol\n\npragma solidity 0.7.5;\n\ncontract Ownable {\n\n    address public policy;\n\n    constructor () {\n        policy = msg.sender;\n    }\n\n    modifier onlyPolicy() {\n        require( policy == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n    \n    function transferManagment(address _newOwner) external onlyPolicy() {\n        require( _newOwner != address(0) );\n        policy = _newOwner;\n    }\n}\n\n\n// File contracts/libraries/SafeMath.sol\n\npragma solidity 0.7.5;\n\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function sqrrt(uint256 a) internal pure returns (uint c) {\n        if (a > 3) {\n            c = a;\n            uint b = add( div( a, 2), 1 );\n            while (b < c) {\n                c = b;\n                b = div( add( div( a, b ), b), 2 );\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n\n\n// File contracts/libraries/Address.sol\n\npragma solidity 0.7.5;\n\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function addressToString(address _address) internal pure returns(string memory) {\n        bytes32 _bytes = bytes32(uint256(_address));\n        bytes memory HEX = \"0123456789abcdef\";\n        bytes memory _addr = new bytes(42);\n\n        _addr[0] = '0';\n        _addr[1] = 'x';\n\n        for(uint256 i = 0; i < 20; i++) {\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n\n        return string(_addr);\n\n    }\n}\n\n\n// File contracts/interfaces/IERC20.sol\n\npragma solidity 0.7.5;\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File contracts/libraries/SafeERC20.sol\n\npragma solidity 0.7.5;\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File contracts/libraries/FullMath.sol\n\n\npragma solidity 0.7.5;\n\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\n        uint256 mm = mulmod(x, y, uint256(-1));\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & -d;\n        d /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n        require(h < d, 'FullMath::mulDiv: overflow');\n        return fullDiv(l, h, d);\n    }\n}\n\n\n// File contracts/libraries/FixedPoint.sol\n\n\npragma solidity 0.7.5;\n\nlibrary Babylonian {\n\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\nlibrary BitMath {\n\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n}\n\n\nlibrary FixedPoint {\n\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\n\n        return uint(self._x) / 5192296858534827;\n    }\n\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= uint144(-1)) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n            return uq112x112(uint224(result));\n        }\n    }\n    \n    // square root of a UQ112x112\n    // lossy between 0/1 and 40 bits\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        if (self._x <= uint144(-1)) {\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n        }\n\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n        safeShiftBits -= safeShiftBits % 2;\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n    }\n}\n\n\n// File contracts/interfaces/ITreasury.sol\n\n\npragma solidity 0.7.5;\n\ninterface ITreasury {\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external;\n    function valueOfToken( address _principleTokenAddress, uint _amount ) external view returns ( uint value_ );\n}\n\n\n// File contracts/RomeProCustomBond.sol\n\npragma solidity 0.7.5;\n\n\n\n\ncontract CustomBond is Ownable {\n    using FixedPoint for *;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n    \n    /* ======== EVENTS ======== */\n\n    event BondCreated( uint deposit, uint payout, uint expires );\n    event BondRedeemed( address recipient, uint payout, uint remaining );\n    event BondPriceChanged( uint internalPrice, uint debtRatio );\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\n    \n    \n     /* ======== STATE VARIABLES ======== */\n    \n    IERC20 immutable payoutToken; // token paid for principal\n    IERC20 immutable principalToken; // inflow token\n    ITreasury immutable customTreasury; // pays for and receives principal\n    address immutable romeDAO;\n    address romeTreasury; // receives fee\n\n    uint public totalPrincipalBonded;\n    uint public totalPayoutGiven;\n    \n    Terms public terms; // stores terms for new bonds\n    Adjust public adjustment; // stores adjustment to BCV data\n    FeeTiers[] private feeTiers; // stores fee tiers\n\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\n\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\n    uint public lastDecay; // reference block for debt decay\n\n    address immutable subsidyRouter; // pays subsidy in OHM to custom treasury\n    uint payoutSinceLastSubsidy; // principal accrued since subsidy paid\n    \n    /* ======== STRUCTS ======== */\n\n    struct FeeTiers {\n        uint tierCeilings; // principal bonded till next tier\n        uint fees; // in ten-thousandths (i.e. 33300 = 3.33%)\n    }\n\n    // Info for creating new bonds\n    struct Terms {\n        uint controlVariable; // scaling variable for price\n        uint vestingTerm; // in blocks\n        uint minimumPrice; // vs principal value\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\n        uint maxDebt; // payout token decimal debt ratio, max % total supply created as debt\n    }\n\n    // Info for bond holder\n    struct Bond {\n        uint payout; // payout token remaining to be paid\n        uint vesting; // Blocks left to vest\n        uint lastBlock; // Last interaction\n        uint truePricePaid; // Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\n    }\n\n    // Info for incremental adjustments to control variable \n    struct Adjust {\n        bool add; // addition or subtraction\n        uint rate; // increment\n        uint target; // BCV when adjustment finished\n        uint buffer; // minimum length (in blocks) between adjustments\n        uint lastBlock; // block when last adjustment made\n    }\n    \n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(\n        address _customTreasury, \n        address _payoutToken, \n        address _principalToken, \n        address _romeTreasury,\n        address _subsidyRouter, \n        address _initialOwner, \n        address _romeDAO,\n        uint[] memory _tierCeilings, \n        uint[] memory _fees\n    ) {\n        require( _customTreasury != address(0) );\n        customTreasury = ITreasury( _customTreasury );\n        require( _payoutToken != address(0) );\n        payoutToken = IERC20( _payoutToken );\n        require( _principalToken != address(0) );\n        principalToken = IERC20( _principalToken );\n        require( _romeTreasury != address(0) );\n        romeTreasury = _romeTreasury;\n        require( _subsidyRouter != address(0) );\n        subsidyRouter = _subsidyRouter;\n        require( _initialOwner != address(0) );\n        policy = _initialOwner;\n        require( _romeDAO != address(0) );\n        romeDAO = _romeDAO;\n        require(_tierCeilings.length == _fees.length, \"tier length and fee length not the same\");\n\n        for(uint i; i < _tierCeilings.length; i++) {\n            feeTiers.push( FeeTiers({\n                tierCeilings: _tierCeilings[i],\n                fees: _fees[i]\n            }));\n        }\n    }\n\n    /* ======== INITIALIZATION ======== */\n    \n    /**\n     *  @notice initializes bond parameters\n     *  @param _controlVariable uint\n     *  @param _vestingTerm uint\n     *  @param _minimumPrice uint\n     *  @param _maxPayout uint\n     *  @param _maxDebt uint\n     *  @param _initialDebt uint\n     */\n    function initializeBond( \n        uint _controlVariable, \n        uint _vestingTerm,\n        uint _minimumPrice,\n        uint _maxPayout,\n        uint _maxDebt,\n        uint _initialDebt\n    ) external onlyPolicy() {\n        require( currentDebt() == 0, \"Debt must be 0 for initialization\" );\n        terms = Terms ({\n            controlVariable: _controlVariable,\n            vestingTerm: _vestingTerm,\n            minimumPrice: _minimumPrice,\n            maxPayout: _maxPayout,\n            maxDebt: _maxDebt\n        });\n        totalDebt = _initialDebt;\n        lastDecay = block.number;\n    }\n    \n    \n    /* ======== POLICY FUNCTIONS ======== */\n\n    enum PARAMETER { VESTING, PAYOUT, DEBT }\n    /**\n     *  @notice set parameters for new bonds\n     *  @param _parameter PARAMETER\n     *  @param _input uint\n     */\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\n        if ( _parameter == PARAMETER.VESTING ) { // 0\n            require( _input >= 10000, \"Vesting must be longer than 36 hours\" );\n            terms.vestingTerm = _input;\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\n            terms.maxPayout = _input;\n        } else if ( _parameter == PARAMETER.DEBT ) { // 2\n            terms.maxDebt = _input;\n        }\n    }\n\n    /**\n     *  @notice set control variable adjustment\n     *  @param _addition bool\n     *  @param _increment uint\n     *  @param _target uint\n     *  @param _buffer uint\n     */\n    function setAdjustment ( \n        bool _addition,\n        uint _increment, \n        uint _target,\n        uint _buffer \n    ) external onlyPolicy() {\n        require( _increment <= terms.controlVariable.mul( 30 ).div( 1000 ), \"Increment too large\" );\n\n        adjustment = Adjust({\n            add: _addition,\n            rate: _increment,\n            target: _target,\n            buffer: _buffer,\n            lastBlock: block.number\n        });\n    }\n\n    /**\n     *  @notice change address of Rome Treasury\n     *  @param _romeTreasury uint\n     */\n    function changeRomeTreasury(address _romeTreasury) external {\n        require( msg.sender == romeDAO, \"Only Rome DAO\" );\n        romeTreasury = _romeTreasury;\n    }\n\n    /**\n     *  @notice subsidy controller checks payouts since last subsidy and resets counter\n     *  @return payoutSinceLastSubsidy_ uint\n     */\n    function paySubsidy() external returns ( uint payoutSinceLastSubsidy_ ) {\n        require( msg.sender == subsidyRouter, \"Only subsidy controller\" );\n\n        payoutSinceLastSubsidy_ = payoutSinceLastSubsidy;\n        payoutSinceLastSubsidy = 0;\n    }\n    \n    /* ======== USER FUNCTIONS ======== */\n    \n    /**\n     *  @notice deposit bond\n     *  @param _amount uint\n     *  @param _maxPrice uint\n     *  @param _depositor address\n     *  @return uint\n     */\n    function deposit(uint _amount, uint _maxPrice, address _depositor) external returns (uint) {\n        require( _depositor != address(0), \"Invalid address\" );\n\n        decayDebt();\n        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );\n        \n        uint nativePrice = trueBondPrice();\n\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\n\n        uint value = customTreasury.valueOfToken( address(principalToken), _amount );\n        uint payout = _payoutFor( value ); // payout to bonder is computed\n\n        require( payout >= 10 ** payoutToken.decimals() / 100, \"Bond too small\" ); // must be > 0.01 payout token ( underflow protection )\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\n\n        // profits are calculated\n        uint fee = payout.mul( currentRomeFee() ).div( 1e6 );\n\n        /**\n            principal is transferred in\n            approved and\n            deposited into the treasury, returning (_amount - profit) payout token\n         */\n        principalToken.safeTransferFrom( msg.sender, address(this), _amount );\n        principalToken.approve( address(customTreasury), _amount );\n        customTreasury.deposit( address(principalToken), _amount, payout );\n        \n        if ( fee != 0 ) { // fee is transferred to dao \n            payoutToken.transfer(romeTreasury, fee);\n        }\n        \n        // total debt is increased\n        totalDebt = totalDebt.add( value );\n                \n        // depositor info is stored\n        bondInfo[ _depositor ] = Bond({ \n            payout: bondInfo[ _depositor ].payout.add( payout.sub(fee) ),\n            vesting: terms.vestingTerm,\n            lastBlock: block.number,\n            truePricePaid: trueBondPrice()\n        });\n\n        // indexed events are emitted\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ) );\n        emit BondPriceChanged( _bondPrice(), debtRatio() );\n\n        totalPrincipalBonded = totalPrincipalBonded.add(_amount); // total bonded increased\n        totalPayoutGiven = totalPayoutGiven.add(payout); // total payout increased\n        payoutSinceLastSubsidy = payoutSinceLastSubsidy.add( payout ); // subsidy counter increased\n\n        adjust(); // control variable is adjusted\n        return payout; \n    }\n    \n    /** \n     *  @notice redeem bond for user\n     *  @return uint\n     */ \n    function redeem(address _depositor) external returns (uint) {\n        Bond memory info = bondInfo[ _depositor ];\n        uint percentVested = percentVestedFor( _depositor ); // (blocks since last interaction / vesting term remaining)\n\n        if ( percentVested >= 10000 ) { // if fully vested\n            delete bondInfo[ _depositor ]; // delete user info\n            emit BondRedeemed( _depositor, info.payout, 0 ); // emit bond data\n            payoutToken.transfer( _depositor, info.payout );\n            return info.payout;\n\n        } else { // if unfinished\n            // calculate payout vested\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\n\n            // store updated deposit info\n            bondInfo[ _depositor ] = Bond({\n                payout: info.payout.sub( payout ),\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\n                lastBlock: block.number,\n                truePricePaid: info.truePricePaid\n            });\n\n            emit BondRedeemed( _depositor, payout, bondInfo[ _depositor ].payout );\n            payoutToken.transfer( _depositor, payout );\n            return payout;\n        }\n        \n    }\n    \n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\n\n    /**\n     *  @notice makes incremental adjustment to control variable\n     */\n    function adjust() internal {\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\n            uint initial = terms.controlVariable;\n            if ( adjustment.add ) {\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\n                if ( terms.controlVariable >= adjustment.target ) {\n                    adjustment.rate = 0;\n                }\n            } else {\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\n                if ( terms.controlVariable <= adjustment.target ) {\n                    adjustment.rate = 0;\n                }\n            }\n            adjustment.lastBlock = block.number;\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\n        }\n    }\n\n    /**\n     *  @notice reduce total debt\n     */\n    function decayDebt() internal {\n        totalDebt = totalDebt.sub( debtDecay() );\n        lastDecay = block.number;\n    }\n\n    /**\n     *  @notice calculate current bond price and remove floor if above\n     *  @return price_ uint\n     */\n    function _bondPrice() internal returns ( uint price_ ) {\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\n        if ( price_ < terms.minimumPrice ) {\n            price_ = terms.minimumPrice;        \n        } else if ( terms.minimumPrice != 0 ) {\n            terms.minimumPrice = 0;\n        }\n    }\n\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     *  @notice calculate current bond premium\n     *  @return price_ uint\n     */\n    function bondPrice() public view returns ( uint price_ ) {        \n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\n        if ( price_ < terms.minimumPrice ) {\n            price_ = terms.minimumPrice;\n        }\n    }\n\n    /**\n     *  @notice calculate true bond price a user pays\n     *  @return price_ uint\n     */\n    function trueBondPrice() public view returns ( uint price_ ) {\n        price_ = bondPrice().add(bondPrice().mul( currentRomeFee() ).div( 1e6 ) );\n    }\n\n    /**\n     *  @notice determine maximum bond size\n     *  @return uint\n     */\n    function maxPayout() public view returns ( uint ) {\n        return payoutToken.totalSupply().mul( terms.maxPayout ).div( 100000 );\n    }\n\n    /**\n     *  @notice calculate total interest due for new bond\n     *  @param _value uint\n     *  @return uint\n     */\n    function _payoutFor( uint _value ) internal view returns ( uint ) {\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\n    }\n\n    /**\n     *  @notice calculate user's interest due for new bond, accounting for Rome Fee\n     *  @param _value uint\n     *  @return uint\n     */\n    function payoutFor( uint _value ) external view returns ( uint ) {\n        uint total = FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\n        return total.sub(total.mul( currentRomeFee() ).div( 1e6 ));\n    }\n\n    /**\n     *  @notice calculate current ratio of debt to payout token supply\n     *  @notice protocols using Rome Pro should be careful when quickly adding large %s to total supply\n     *  @return debtRatio_ uint\n     */\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \n        debtRatio_ = FixedPoint.fraction( \n            currentDebt().mul( 10 ** payoutToken.decimals() ), \n            payoutToken.totalSupply()\n        ).decode112with18().div( 1e18 );\n    }\n\n    /**\n     *  @notice calculate debt factoring in decay\n     *  @return uint\n     */\n    function currentDebt() public view returns ( uint ) {\n        return totalDebt.sub( debtDecay() );\n    }\n\n    /**\n     *  @notice amount to decay total debt by\n     *  @return decay_ uint\n     */\n    function debtDecay() public view returns ( uint decay_ ) {\n        uint blocksSinceLast = block.number.sub( lastDecay );\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\n        if ( decay_ > totalDebt ) {\n            decay_ = totalDebt;\n        }\n    }\n\n\n    /**\n     *  @notice calculate how far into vesting a depositor is\n     *  @param _depositor address\n     *  @return percentVested_ uint\n     */\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\n        Bond memory bond = bondInfo[ _depositor ];\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\n        uint vesting = bond.vesting;\n\n        if ( vesting > 0 ) {\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\n        } else {\n            percentVested_ = 0;\n        }\n    }\n\n    /**\n     *  @notice calculate amount of payout token available for claim by depositor\n     *  @param _depositor address\n     *  @return pendingPayout_ uint\n     */\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\n        uint percentVested = percentVestedFor( _depositor );\n        uint payout = bondInfo[ _depositor ].payout;\n\n        if ( percentVested >= 10000 ) {\n            pendingPayout_ = payout;\n        } else {\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\n        }\n    }\n\n    /**\n     *  @notice current fee Rome takes of each bond\n     *  @return currentFee_ uint\n     */\n    function currentRomeFee() public view returns( uint currentFee_ ) {\n        uint tierLength = feeTiers.length;\n        for(uint i; i < tierLength; i++) {\n            if(totalPrincipalBonded < feeTiers[i].tierCeilings || i == tierLength - 1 ) {\n                return feeTiers[i].fees;\n            }\n        }\n    }\n    \n}\n\n\n// File contracts/RomeProCustomTreasury.sol\n\n\npragma solidity 0.7.5;\n\n\ncontract CustomTreasury is Ownable {\n    \n    /* ======== DEPENDENCIES ======== */\n    \n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n    \n    \n    /* ======== STATE VARIABLS ======== */\n    \n    address public immutable payoutToken;\n\n    mapping(address => bool) public bondContract; \n    \n    /* ======== EVENTS ======== */\n\n    event BondContractToggled(address bondContract, bool approved);\n    event Withdraw(address token, address destination, uint amount);\n    \n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(address _payoutToken, address _initialOwner) {\n        require( _payoutToken != address(0) );\n        payoutToken = _payoutToken;\n        require( _initialOwner != address(0) );\n        policy = _initialOwner;\n    }\n\n    /* ======== BOND CONTRACT FUNCTION ======== */\n\n    /**\n     *  @notice deposit principle token and recieve back payout token\n     *  @param _principleTokenAddress address\n     *  @param _amountPrincipleToken uint\n     *  @param _amountPayoutToken uint\n     */\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external {\n        require(bondContract[msg.sender], \"msg.sender is not a bond contract\");\n        IERC20(_principleTokenAddress).safeTransferFrom(msg.sender, address(this), _amountPrincipleToken);\n        IERC20(payoutToken).safeTransfer(msg.sender, _amountPayoutToken);\n    }\n\n    /* ======== VIEW FUNCTION ======== */\n    \n    /**\n    *   @notice returns payout token valuation of priciple\n    *   @param _principleTokenAddress address\n    *   @param _amount uint\n    *   @return value_ uint\n     */\n    function valueOfToken( address _principleTokenAddress, uint _amount ) public view returns ( uint value_ ) {\n        // convert amount to match payout token decimals\n        value_ = _amount.mul( 10 ** IERC20( payoutToken ).decimals() ).div( 10 ** IERC20( _principleTokenAddress ).decimals() );\n    }\n\n\n    /* ======== POLICY FUNCTIONS ======== */\n\n    /**\n     *  @notice policy can withdraw ERC20 token to desired address\n     *  @param _token uint\n     *  @param _destination address\n     *  @param _amount uint\n     */\n    function withdraw(address _token, address _destination, uint _amount) external onlyPolicy() {\n        IERC20(_token).safeTransfer(_destination, _amount);\n\n        emit Withdraw(_token, _destination, _amount);\n    }\n\n    /**\n        @notice toggle bond contract\n        @param _bondContract address\n     */\n    function toggleBondContract(address _bondContract) external onlyPolicy() {\n        bondContract[_bondContract] = !bondContract[_bondContract];\n        emit BondContractToggled(_bondContract, bondContract[_bondContract]);\n    }\n    \n}\n\n\n// File contracts/RomeProFactory.sol\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\n\ncontract RomeProFactory is Ownable {\n    \n    /* ======== STATE VARIABLS ======== */\n    \n    address immutable public romeTreasury;\n    address immutable public romeProFactoryStorage;\n    address immutable public romeProSubsidyRouter;\n    address immutable public romeDAO;\n    \n    /* ======== CONSTRUCTION ======== */\n    \n    constructor(address _romeTreasury, address _romeProFactoryStorage, address _romeProSubsidyRouter, address _romeDAO) {\n        require( _romeTreasury != address(0) );\n        romeTreasury = _romeTreasury;\n        require( _romeProFactoryStorage != address(0) );\n        romeProFactoryStorage = _romeProFactoryStorage;\n        require( _romeProSubsidyRouter != address(0) );\n        romeProSubsidyRouter = _romeProSubsidyRouter;\n        require( _romeDAO != address(0) );\n        romeDAO = _romeDAO;\n    }\n    \n    /* ======== POLICY FUNCTIONS ======== */\n    \n    /**\n        @notice deploys custom treasury and custom bond contracts and returns address of both\n        @param _payoutToken address\n        @param _principleToken address\n        @param _initialOwner address\n        @return _treasury address\n        @return _bond address\n     */\n    function createBondAndTreasury(address _payoutToken, address _principleToken, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external onlyPolicy() returns(address _treasury, address _bond) {\n    \n        CustomTreasury treasury = new CustomTreasury(_payoutToken, _initialOwner);\n        CustomBond bond = new CustomBond(address(treasury), _payoutToken, _principleToken, romeTreasury, romeProSubsidyRouter, _initialOwner, romeDAO, _tierCeilings, _fees);\n        \n        return IRomeProFactoryStorage(romeProFactoryStorage).pushBond(\n            _payoutToken, _principleToken, address(treasury), address(bond), _initialOwner, _tierCeilings, _fees\n        );\n    }\n\n    /**\n        @notice deploys custom treasury and custom bond contracts and returns address of both\n        @param _payoutToken address\n        @param _principleToken address\n        @param _customTreasury address\n        @param _initialOwner address\n        @return _treasury address\n        @return _bond address\n     */\n    function createBond(address _payoutToken, address _principleToken, address _customTreasury, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees ) external onlyPolicy() returns(address _treasury, address _bond) {\n\n        CustomBond bond = new CustomBond(_customTreasury, _payoutToken, _principleToken, _customTreasury, romeProSubsidyRouter, _initialOwner, romeDAO, _tierCeilings, _fees);\n\n        return IRomeProFactoryStorage(romeProFactoryStorage).pushBond(\n            _payoutToken, _principleToken, _customTreasury, address(bond), _initialOwner, _tierCeilings, _fees\n        );\n    }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}