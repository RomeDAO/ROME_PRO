{
  "language": "Solidity",
  "sources": {
    "src/contracts/factoryStorage.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-09-23\n*/\n\n// File contracts/types/Ownable.sol\n\npragma solidity 0.7.5;\n\ncontract Ownable {\n\n    address public policy;\n\n    constructor () {\n        policy = msg.sender;\n    }\n\n    modifier onlyPolicy() {\n        require( policy == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n    \n    function transferManagment(address _newOwner) external onlyPolicy() {\n        require( _newOwner != address(0) );\n        policy = _newOwner;\n    }\n}\n\n\n// File contracts/RomeProFactoryStorage.sol\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ncontract RomeProFactoryStorage is Ownable {\n    \n    /* ======== STRUCTS ======== */\n\n    struct BondDetails {\n        address _payoutToken;\n        address _principleToken;\n        address _treasuryAddress;\n        address _bondAddress;\n        address _initialOwner;\n        uint[] _tierCeilings;\n        uint[] _fees;\n    }\n    \n    /* ======== STATE VARIABLS ======== */\n    BondDetails[] public bondDetails;\n\n    address public romeProFactory;\n\n    mapping(address => uint) public indexOfBond;\n\n    /* ======== EVENTS ======== */\n\n    event BondCreation(address treasury, address bond, address _initialOwner);\n    \n    /* ======== POLICY FUNCTIONS ======== */\n    \n    /**\n        @notice pushes bond details to array\n        @param _payoutToken address\n        @param _principleToken address\n        @param _customTreasury address\n        @param _customBond address\n        @param _initialOwner address\n        @param _tierCeilings uint[]\n        @param _fees uint[]\n        @return _treasury address\n        @return _bond address\n     */\n    function pushBond(address _payoutToken, address _principleToken, address _customTreasury, address _customBond, address _initialOwner, uint[] calldata _tierCeilings, uint[] calldata _fees) external returns(address _treasury, address _bond) {\n        require(romeProFactory == msg.sender, \"Not Rome Pro Factory\");\n\n        indexOfBond[_customBond] = bondDetails.length;\n        \n        bondDetails.push( BondDetails({\n            _payoutToken: _payoutToken,\n            _principleToken: _principleToken,\n            _treasuryAddress: _customTreasury,\n            _bondAddress: _customBond,\n            _initialOwner: _initialOwner,\n            _tierCeilings: _tierCeilings,\n            _fees: _fees\n        }));\n\n        emit BondCreation(_customTreasury, _customBond, _initialOwner);\n        return( _customTreasury, _customBond );\n    }\n\n    /**\n        @notice changes rome pro factory address\n        @param _factory address\n     */\n    function setFactoryAddress(address _factory) external onlyPolicy() {\n        romeProFactory = _factory;\n    }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}