{
  "language": "Solidity",
  "sources": {
    "src/contracts/subsidy.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-09-23\n*/\n\n// File contracts/types/Ownable.sol\n\npragma solidity 0.7.5;\n\ncontract Ownable {\n\n    address public policy;\n\n    constructor () {\n        policy = msg.sender;\n    }\n\n    modifier onlyPolicy() {\n        require( policy == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n    \n    function transferManagment(address _newOwner) external onlyPolicy() {\n        require( _newOwner != address(0) );\n        policy = _newOwner;\n    }\n}\n\n\n// File contracts/RomeProSubsidyRouter.sol\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IBond {\n    function paySubsidy() external returns ( uint );\n}\n\n// Immutable contract routes between Rome Pro bonds and subsidy controllers\n// Allows for subsidies on bonds offered through bond contracts\ncontract RPSubsidyRouter is Ownable {\n\n    mapping( address => address ) public bondForController; // maps bond contract managed by subsidy controller\n\n    /**\n     *  @notice subsidy controller fetches and resets payout counter\n     *  @return uint\n     */\n    function getSubsidyInfo() external returns ( uint ) {\n        require( bondForController[ msg.sender ] != address(0), \"Address not mapped\" );\n        return IBond( bondForController[ msg.sender ] ).paySubsidy();\n    }\n\n    /**\n     *  @notice add new subsidy controller for bond contract\n     *  @param _bond address\n     *  @param _subsidyController address\n     */\n    function addSubsidyController( address _bond, address _subsidyController ) external onlyPolicy() {\n        require( _bond != address(0) );\n        require( _subsidyController != address(0) );\n\n        bondForController[ _subsidyController ] = _bond;\n    }\n\n    /**\n     *  @notice remove subsidy controller for bond contract\n     *  @param _subsidyController address\n     */\n    function removeSubsidyController( address _subsidyController ) external onlyPolicy() {\n        bondForController[ _subsidyController ] = address(0);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}